[{"title":"VS code 调试Cmake 工程","date":"2020-06-04T08:49:49.000Z","path":"2020/06/04/vscode-catkin/","text":"VS code 调试Cmake 工程： VS code 及cmake 安装步骤请参考： VSCode CMake 安装与配置详解 下载安装cmake，并添加到环境变量（重启后生效） 一：编写 cmake 工程框架 文件 使用【Ctrl+Shift+p】 输入：CMake:Configure 创建一个Cmake 工程框架，自动生成Cmakelists.txt 文件，通用工程框架如下： 以上创建Cmake 工程 网上例程很多，但是VS code 调试 C++ 代码，如果利用传统的配置task.json,对于大量.cpp,.h构成的工程显得比较繁琐， Cmakelist 解决了这个问题。但是 VS code Cmake 插件只能编译不能调试，网上相关例程并不是很多。那么如何在VS code下调试 Cmake 工程？ 很简单，在 launch.json 和 task.json 加入几行代码即可。 二、配置 launch.json 和task.json launch.json 配置如下： 123456789101112131415161718192021222324252627&#123; \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"debug\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"$&#123;fileDirname&#125;\\\\build\\\\leecode_node.exe\", //这个地方换成自己要调试的 .exe，注意切换到build 文件夹下，作为编译输出文件夹 \"args\": [], \"stopAtEntry\": false, \"cwd\": \"$&#123;workspaceFolder&#125;\", \"environment\": [], \"externalConsole\": true, \"MIMode\": \"gdb\", \"miDebuggerPath\": \"C:\\\\mingw64\\\\bin\\\\gdb.exe\", \"setupCommands\": [ &#123; \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true &#125; ], \"preLaunchTask\": \"make\" //预先启动的task的脚本，task.json 是代码的编译相关脚本 // make 只是任务的标签 &#125; ]&#125; launch.json 为 VS code 这个IDE 的环境相关的配置脚本，不同的代码语言，不同的环境，通常对应不同的设置。 环境加载好了，那么就剩编译代码了。task.json 就是代码编译相关脚本。 task.json 配置如下： 1234567891011121314151617181920212223&#123; \"version\": \"2.0.0\", \"tasks\": [ &#123; \"label\": \"cmake\", \"options\": &#123; \"cwd\": \"$&#123;workspaceFolder&#125;/build\" //切换到build 下，重要！ &#125;, \"type\": \"shell\", \"command\": \"cmake -G 'Unix Makefiles' -DCMAKE_BUILD_TYPE=Debug .. \", &#125;, &#123; \"label\": \"make\", \"options\": &#123; \"cwd\": \"$&#123;workspaceFolder&#125;/build\" //切换到build 下，重要！ &#125;, \"type\": \"shell\", \"command\": \"make -j8\", //-j n 电脑几核就可以写几，加快编译速度 &#125;, \"dependsOn\": [ \"cmake\" ], //非常重要！ make 的执行依赖 Cmake 执行完毕，不然呵呵 &#125; ]&#125; 配置完毕后： 按下F5 就可以开始编译调试Cmake 工程啦，还可以设置断点，美滋滋！ VS code 里面很多好用的功能就可以在大型 C/C++ 工程中派上用场啦。 以上为自己总结，欢迎大家指出不足之处，共勉！","categories":[],"tags":[{"name":"code tool","slug":"code-tool","permalink":"https://wangchangjin123.github.io/tags/code-tool/"}]},{"title":"Jira 项目管理工具使用","date":"2019-08-04T08:54:46.000Z","path":"2019/08/04/jira/","text":"一、Jira 简介 JIRA 是目前比较流行的基于Java架构的管理系统。是一个项目管理工具，包含任务指定，实时追踪，权限管理，邮件通知等。JIRA功能全面，界面友好，安装简单，配置灵活，权限管理以及可扩展性方面都十分出色 Jira 项目管理界面 Jira 完善的邮件通知系统 Jira 时间跟踪报告 任务进度查询 用户管理 等等一系列功能 二、Jira 安装配置 2.1 安装 Jira 特指Jira software (server)，服务器版本，只需要在一台服务器电脑上安装即可，服务器可以设置成管理员电脑或者其他公用电脑。其他人登陆这个服务器地址访问就可以查看到每个人对应的任务。 服务器端安装： 下载： https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-8.5.1-x64.exe 按照默认去安装，安装完毕，输入序列号 复制进去即可。 运行先点： Start Jira service 8080. 再点击 Access Jira 跳转至管理界面 此时服务器地址 为 http://localhost:8080/。 在实验室，在校园局域网下，内网IP一般固定，直接把localhost 换成 内网IP即可。如http://223.104.37.147:8080 不在一个局域网下，需要通过公网访问，服务器为我的笔记本。大家可以访问我搭建的临时域名：http://29035x91a2.zicp.vip/ 登陆查看自己当前状态 2.2 设置邮件代发服务 设置邮件代发服务，一旦被分派了任务或者任务变更，轻松通知收件人。 2.3 用户管理 可以管理员自己邀请用户，也可以管理员直接输入用户邮箱添加，最多10个人，管理员可以设置不同的分组权限，允许多个管理员 ##三、Jira 使用 ###3.1 新建项目工程 新建一个business下的项目管理项目，输入项目名称，项目负责人（管理员） 点击创建问题 将任务以及相关子任务依次输入，并输入预期完成时间 ###3.2 可视化项目报告 包括进展，时间追踪，效率报告等，任务创建后需要实时查看相关进展以及处理情况。需要可视化评估 步骤3选择第一个scrum面板过后： 显示的是燃尽图，燃尽图（sprint图），燃尽图是敏捷开发框架中，在冲刺（Sprint）执行时需要用到的报表，观察任务的实际燃尽曲线与参照线的差异可以掌握当前进行中的冲刺目标的进展情况。另外，在冲刺回顾的时候，分析已完成冲刺目标的燃尽图对下一期的冲刺规划有参考意义。 步骤3选择第二个面板过后： 待办，处理中，已完成一目了然。 #相关概念 参考：https://baijiahao.baidu.com/s?id=1600789671759427109&amp;wfr=spider&amp;for=pc 问题&amp;问题类型（issues） 一个问题对应一个要解决的事项，问题还可以细分。 JIRA 系统可以用于跟踪多种不同类型的问题。系统管理员可以根据需要添加。JIRA系统缺省提供的问题类型如下： Bug'缺陷'：测试过程、维护过程发现影响系统运行的缺陷 New Feature'新需求' ：对系统提出的新功能 Task'任务' ：需要完成的任务 Improvement'改进意见' ：对现有系统功能的改进 项目模块 一个项目模块是这个项目中问题的逻辑分类集合。每个项目都可以根据你任务的要求设置多个模块(也可以不设置模块)。比如模块可以细分为研发，财务报销，采购等。并把问题归为这类方便管理。 优先级（Priority Levels） 在 JIRA 系统中用优先级来表示问题的严重级别。系统管理员可以在 JIRA 系统中添加优先级，JIRA系统缺省的优先级为’紧急’，‘严重’，‘一般’，‘次要’，‘无关紧要’5个级别： 项目版本 在一个项目上，一般会有多个版本，如：1.0alpha、1.0beta、1.0、1.2、2.0。JIRA 系统中的问题涉及到两个版本字段： 影响版本— 可以清晰地反映出这个问题在哪个版本中出现错误。例如, 一个软件的缺陷可能影响了产品的1.1和1.2版。 修复版本— 可以反映出报告的问题将在哪个版本，或已经在哪个版本中修复了。例如, 软件缺陷影响了产品的1.1和1.2版，这个缺陷已经在2.0版中修复了。注意没有修复版本的问题会被归类到’未规划’。 版本可以有3个状态: 已发布,未发布或已归档。版本可以设置发布日期,而JIRA会自动将到期而还没有发布的版本高亮显示出来，并标注上’超期’标志。","categories":[],"tags":[{"name":"code tool","slug":"code-tool","permalink":"https://wangchangjin123.github.io/tags/code-tool/"}]}]